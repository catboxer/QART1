{
  "version": 3,
  "sources": ["../../../../../../Users/macuser/qart-experiment/netlify/functions/qrng-proxy.js"],
  "sourceRoot": "/var/folders/10/893wm_w56ks_8yl6_5ydlcvw0000gn/T/tmp-23990-ZHWwGu4rHFuB",
  "sourcesContent": ["export async function handler(event, context) {\n  const CORS_HEADERS = {\n    'Access-Control-Allow-Origin': '*',\n    'Access-Control-Allow-Headers': 'Content-Type',\n    'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',\n    'Content-Type': 'application/json',\n  };\n\n  if (event.httpMethod === 'OPTIONS') {\n    return {\n      statusCode: 204,\n      headers: CORS_HEADERS,\n    };\n  }\n\n  let byte;\n\n  try {\n    const upstream = await fetch(\n      'https://qrng.anu.edu.au/API/jsonI.php?length=1&type=uint8'\n    );\n\n    if (upstream.ok) {\n      const text = await upstream.text();\n      try {\n        const json = JSON.parse(text);\n        if (Array.isArray(json.data) && json.data.length > 0) {\n          byte = json.data[0];\n        } else {\n          console.warn('ANU QRNG returned no data array', json);\n        }\n      } catch (parseErr) {\n        console.warn('ANU QRNG JSON parse failed:', parseErr);\n      }\n    } else {\n      console.warn(\n        `ANU QRNG HTTP error ${upstream.status}: ${upstream.statusText}`\n      );\n    }\n  } catch (networkErr) {\n    console.warn('ANU QRNG network error:', networkErr);\n  }\n\n  const payload =\n    typeof byte === 'number'\n      ? {\n          type: 'uint8',\n          length: 1,\n          data: [byte],\n          success: true,\n          fallback: false,\n        }\n      : {\n          type: 'uint8',\n          length: 1,\n          data: [Math.floor(Math.random() * 256)],\n          success: false,\n          fallback: true,\n        };\n\n  return {\n    statusCode: 200,\n    headers: CORS_HEADERS,\n    body: JSON.stringify(payload),\n  };\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAsB,QAAQ,OAAO,SAAS;AAC5C,QAAM,eAAe;AAAA,IACnB,+BAA+B;AAAA,IAC/B,gCAAgC;AAAA,IAChC,gCAAgC;AAAA,IAChC,gBAAgB;AAAA,EAClB;AAEA,MAAI,MAAM,eAAe,WAAW;AAClC,WAAO;AAAA,MACL,YAAY;AAAA,MACZ,SAAS;AAAA,IACX;AAAA,EACF;AAEA,MAAI;AAEJ,MAAI;AACF,UAAM,WAAW,MAAM;AAAA,MACrB;AAAA,IACF;AAEA,QAAI,SAAS,IAAI;AACf,YAAM,OAAO,MAAM,SAAS,KAAK;AACjC,UAAI;AACF,cAAM,OAAO,KAAK,MAAM,IAAI;AAC5B,YAAI,MAAM,QAAQ,KAAK,IAAI,KAAK,KAAK,KAAK,SAAS,GAAG;AACpD,iBAAO,KAAK,KAAK,CAAC;AAAA,QACpB,OAAO;AACL,kBAAQ,KAAK,mCAAmC,IAAI;AAAA,QACtD;AAAA,MACF,SAAS,UAAU;AACjB,gBAAQ,KAAK,+BAA+B,QAAQ;AAAA,MACtD;AAAA,IACF,OAAO;AACL,cAAQ;AAAA,QACN,uBAAuB,SAAS,MAAM,KAAK,SAAS,UAAU;AAAA,MAChE;AAAA,IACF;AAAA,EACF,SAAS,YAAY;AACnB,YAAQ,KAAK,2BAA2B,UAAU;AAAA,EACpD;AAEA,QAAM,UACJ,OAAO,SAAS,WACZ;AAAA,IACE,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,MAAM,CAAC,IAAI;AAAA,IACX,SAAS;AAAA,IACT,UAAU;AAAA,EACZ,IACA;AAAA,IACE,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,MAAM,CAAC,KAAK,MAAM,KAAK,OAAO,IAAI,GAAG,CAAC;AAAA,IACtC,SAAS;AAAA,IACT,UAAU;AAAA,EACZ;AAEN,SAAO;AAAA,IACL,YAAY;AAAA,IACZ,SAAS;AAAA,IACT,MAAM,KAAK,UAAU,OAAO;AAAA,EAC9B;AACF;",
  "names": []
}
