{
  "version": 3,
  "sources": ["../../../../../../Users/macuser/qart-experiment/netlify/functions/lfdr-qrng.js"],
  "sourceRoot": "/var/folders/10/893wm_w56ks_8yl6_5ydlcvw0000gn/T/tmp-22574-q0bgMKIY4GE3",
  "sourcesContent": ["const CORS_HEADERS = {\n  'Access-Control-Allow-Origin': '*',\n  'Access-Control-Allow-Headers': 'Content-Type',\n  'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',\n  'Content-Type': 'application/json',\n  'Cache-Control':\n    'no-store, no-cache, must-revalidate, proxy-revalidate',\n  Pragma: 'no-cache',\n  Expires: '0',\n  'Surrogate-Control': 'no-store',\n};\n\nexports.handler = async function (event, context) {\n  if (event.httpMethod === 'OPTIONS') {\n    return {\n      statusCode: 204,\n      headers: CORS_HEADERS,\n    };\n  }\n\n  try {\n    const url = `https://lfdr.de/qrng_api/qrng?length=1&format=BINARY`;\n    console.log('LFDR upstream URL:', url);\n    const res = await fetch(url, {\n      cache: 'no-store',\n      headers: {\n        'Cache-Control': 'no-store',\n        Pragma: 'no-cache',\n      },\n    });\n\n    if (!res.ok) {\n      return {\n        statusCode: res.status,\n        headers: CORS_HEADERS,\n        body: JSON.stringify({\n          success: false,\n          fallback: true,\n          error: `LFDR HTTP ${res.status}: ${res.statusText}`,\n        }),\n      };\n    }\n\n    const { qrn } = await res.json();\n    const bit = qrn[1];\n    const byte = parseInt(bit, 2);\n\n    return {\n      statusCode: 200,\n      headers: CORS_HEADERS,\n      body: JSON.stringify({\n        data: [byte],\n        success: true,\n        fallback: false,\n        source: 'lfdr',\n        raw: qrn,\n      }),\n    };\n  } catch (err) {\n    return {\n      statusCode: 500,\n      headers: CORS_HEADERS,\n      body: JSON.stringify({\n        success: false,\n        fallback: true,\n        error: err.message,\n      }),\n    };\n  }\n};\n"],
  "mappings": ";AAAA,IAAM,eAAe;AAAA,EACnB,+BAA+B;AAAA,EAC/B,gCAAgC;AAAA,EAChC,gCAAgC;AAAA,EAChC,gBAAgB;AAAA,EAChB,iBACE;AAAA,EACF,QAAQ;AAAA,EACR,SAAS;AAAA,EACT,qBAAqB;AACvB;AAEA,QAAQ,UAAU,eAAgB,OAAO,SAAS;AAChD,MAAI,MAAM,eAAe,WAAW;AAClC,WAAO;AAAA,MACL,YAAY;AAAA,MACZ,SAAS;AAAA,IACX;AAAA,EACF;AAEA,MAAI;AACF,UAAM,MAAM;AACZ,YAAQ,IAAI,sBAAsB,GAAG;AACrC,UAAM,MAAM,MAAM,MAAM,KAAK;AAAA,MAC3B,OAAO;AAAA,MACP,SAAS;AAAA,QACP,iBAAiB;AAAA,QACjB,QAAQ;AAAA,MACV;AAAA,IACF,CAAC;AAED,QAAI,CAAC,IAAI,IAAI;AACX,aAAO;AAAA,QACL,YAAY,IAAI;AAAA,QAChB,SAAS;AAAA,QACT,MAAM,KAAK,UAAU;AAAA,UACnB,SAAS;AAAA,UACT,UAAU;AAAA,UACV,OAAO,aAAa,IAAI,MAAM,KAAK,IAAI,UAAU;AAAA,QACnD,CAAC;AAAA,MACH;AAAA,IACF;AAEA,UAAM,EAAE,IAAI,IAAI,MAAM,IAAI,KAAK;AAC/B,UAAM,MAAM,IAAI,CAAC;AACjB,UAAM,OAAO,SAAS,KAAK,CAAC;AAE5B,WAAO;AAAA,MACL,YAAY;AAAA,MACZ,SAAS;AAAA,MACT,MAAM,KAAK,UAAU;AAAA,QACnB,MAAM,CAAC,IAAI;AAAA,QACX,SAAS;AAAA,QACT,UAAU;AAAA,QACV,QAAQ;AAAA,QACR,KAAK;AAAA,MACP,CAAC;AAAA,IACH;AAAA,EACF,SAAS,KAAK;AACZ,WAAO;AAAA,MACL,YAAY;AAAA,MACZ,SAAS;AAAA,MACT,MAAM,KAAK,UAAU;AAAA,QACnB,SAAS;AAAA,QACT,UAAU;AAAA,QACV,OAAO,IAAI;AAAA,MACb,CAAC;AAAA,IACH;AAAA,EACF;AACF;",
  "names": []
}
