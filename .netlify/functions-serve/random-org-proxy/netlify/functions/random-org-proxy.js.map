{
  "version": 3,
  "sources": ["../../../../../../Users/macuser/qart-experiment/netlify/functions/random-org-proxy.js"],
  "sourceRoot": "/var/folders/10/893wm_w56ks_8yl6_5ydlcvw0000gn/T/tmp-23990-95VXVc8gFX7h",
  "sourcesContent": ["export async function handler(event, context) {\n  const CORS_HEADERS = {\n    'Access-Control-Allow-Origin': '*',\n    'Access-Control-Allow-Headers': 'Content-Type',\n    'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',\n    'Content-Type': 'application/json',\n  };\n\n  if (event.httpMethod === 'OPTIONS') {\n    return {\n      statusCode: 204,\n      headers: CORS_HEADERS,\n    };\n  }\n\n  const API_KEY = process.env.RANDOM_ORG_API_KEY;\n  if (!API_KEY) {\n    return {\n      statusCode: 500,\n      headers: CORS_HEADERS,\n      body: JSON.stringify({ error: 'Missing RANDOM_ORG_API_KEY' }),\n    };\n  }\n\n  const payload = {\n    jsonrpc: '2.0',\n    method: 'generateIntegers',\n    params: {\n      apiKey: API_KEY,\n      n: 1,\n      min: 0,\n      max: 255,\n      replacement: true,\n    },\n    id: Date.now(),\n  };\n\n  try {\n    const res = await fetch(\n      'https://api.random.org/json-rpc/4/invoke',\n      {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(payload),\n      }\n    );\n    if (!res.ok) throw new Error(`HTTP ${res.status}`);\n    const { result } = await res.json();\n    const byte = result.random.data[0];\n\n    return {\n      statusCode: 200,\n      headers: CORS_HEADERS,\n      body: JSON.stringify({\n        data: [byte],\n        success: true,\n      }),\n    };\n  } catch (err) {\n    console.error('Random.org proxy error:', err);\n    const fallback = Math.floor(Math.random() * 256);\n    return {\n      statusCode: 200,\n      headers: CORS_HEADERS,\n      body: JSON.stringify({\n        data: [fallback],\n        success: false,\n        fallback: true,\n      }),\n    };\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAsB,QAAQ,OAAO,SAAS;AAC5C,QAAM,eAAe;AAAA,IACnB,+BAA+B;AAAA,IAC/B,gCAAgC;AAAA,IAChC,gCAAgC;AAAA,IAChC,gBAAgB;AAAA,EAClB;AAEA,MAAI,MAAM,eAAe,WAAW;AAClC,WAAO;AAAA,MACL,YAAY;AAAA,MACZ,SAAS;AAAA,IACX;AAAA,EACF;AAEA,QAAM,UAAU,QAAQ,IAAI;AAC5B,MAAI,CAAC,SAAS;AACZ,WAAO;AAAA,MACL,YAAY;AAAA,MACZ,SAAS;AAAA,MACT,MAAM,KAAK,UAAU,EAAE,OAAO,6BAA6B,CAAC;AAAA,IAC9D;AAAA,EACF;AAEA,QAAM,UAAU;AAAA,IACd,SAAS;AAAA,IACT,QAAQ;AAAA,IACR,QAAQ;AAAA,MACN,QAAQ;AAAA,MACR,GAAG;AAAA,MACH,KAAK;AAAA,MACL,KAAK;AAAA,MACL,aAAa;AAAA,IACf;AAAA,IACA,IAAI,KAAK,IAAI;AAAA,EACf;AAEA,MAAI;AACF,UAAM,MAAM,MAAM;AAAA,MAChB;AAAA,MACA;AAAA,QACE,QAAQ;AAAA,QACR,SAAS,EAAE,gBAAgB,mBAAmB;AAAA,QAC9C,MAAM,KAAK,UAAU,OAAO;AAAA,MAC9B;AAAA,IACF;AACA,QAAI,CAAC,IAAI;AAAI,YAAM,IAAI,MAAM,QAAQ,IAAI,MAAM,EAAE;AACjD,UAAM,EAAE,OAAO,IAAI,MAAM,IAAI,KAAK;AAClC,UAAM,OAAO,OAAO,OAAO,KAAK,CAAC;AAEjC,WAAO;AAAA,MACL,YAAY;AAAA,MACZ,SAAS;AAAA,MACT,MAAM,KAAK,UAAU;AAAA,QACnB,MAAM,CAAC,IAAI;AAAA,QACX,SAAS;AAAA,MACX,CAAC;AAAA,IACH;AAAA,EACF,SAAS,KAAK;AACZ,YAAQ,MAAM,2BAA2B,GAAG;AAC5C,UAAM,WAAW,KAAK,MAAM,KAAK,OAAO,IAAI,GAAG;AAC/C,WAAO;AAAA,MACL,YAAY;AAAA,MACZ,SAAS;AAAA,MACT,MAAM,KAAK,UAAU;AAAA,QACnB,MAAM,CAAC,QAAQ;AAAA,QACf,SAAS;AAAA,QACT,UAAU;AAAA,MACZ,CAAC;AAAA,IACH;AAAA,EACF;AACF;",
  "names": []
}
